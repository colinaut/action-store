{"version":3,"file":"action-store.js","sources":["../src/action-store.ts"],"sourcesContent":["function isJsonObject(str: string) {\n\ttry {\n\t\tconst json = JSON.parse(str);\n\t\treturn !!json && typeof json === \"object\";\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nfunction isHTMLInputElement(el: Element | EventTarget | null): el is HTMLInputElement {\n\treturn el instanceof HTMLInputElement;\n}\n\nfunction isField(el: Element | EventTarget | null): el is HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement {\n\treturn isHTMLInputElement(el) || el instanceof HTMLSelectElement || el instanceof HTMLTextAreaElement;\n}\n\nfunction isCheckbox(el: HTMLElement): el is HTMLInputElement {\n\treturn isHTMLInputElement(el) && el.type === \"checkbox\";\n}\n\nfunction isRadio(el: HTMLElement): el is HTMLInputElement {\n\treturn isHTMLInputElement(el) && el.type === \"radio\";\n}\n\nexport class ActionStore extends HTMLElement {\n\tprivate getStoreElements!: NodeListOf<HTMLElement>;\n\n\tget store() {\n\t\treturn this.getAttribute(\"store\");\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst eventType = this.getAttribute(\"event-type\") || \"change\";\n\n\t\t// Listener to set store from field values\n\t\tthis.addEventListener(eventType, (e) => {\n\t\t\tconst storeKey = this.store;\n\t\t\tif (!storeKey) return;\n\t\t\tconst el = e.target;\n\t\t\tif (isField(el) && el.hasAttribute(\"data-set-store\")) {\n\t\t\t\t// get value from field unless it is a checkbox or radio that is unchecked then set value to empty string\n\t\t\t\tconst value = (isCheckbox(el) || isRadio(el)) && !el.checked ? \"\" : el.value;\n\t\t\t\t// base store is the el.value\n\t\t\t\tlet storeStr: string = value;\n\t\t\t\t// if there is a prop and local storage is an object and save it as a property of that object\n\t\t\t\tconst prop = el.dataset.setStore;\n\t\t\t\tconst ls = localStorage.getItem(storeKey) || \"{}\";\n\t\t\t\tthis.log(\"setStore\", storeKey, storeStr, prop, ls);\n\t\t\t\tif (prop) {\n\t\t\t\t\tconst storeObject: Record<string, string> = ls && isJsonObject(ls) ? JSON.parse(ls) : {};\n\t\t\t\t\tstoreObject[prop] = storeStr;\n\t\t\t\t\tstoreStr = JSON.stringify(storeObject);\n\t\t\t\t}\n\t\t\t\t// set store\n\t\t\t\tthis.log(\"setStore: store\", storeKey, storeStr);\n\t\t\t\tlocalStorage.setItem(storeKey, storeStr);\n\t\t\t\twindow.dispatchEvent(new StorageEvent(\"storage\", { key: storeKey, oldValue: ls, newValue: storeStr }));\n\t\t\t}\n\t\t});\n\n\t\t// Listener for storage event to get values from store\n\t\tif (this.hasAttribute(\"store-listen\")) {\n\t\t\twindow.addEventListener(\"storage\", (e) => {\n\t\t\t\tconst storeKey = this.store;\n\t\t\t\tif (!storeKey) return;\n\t\t\t\tif (e.key === storeKey) {\n\t\t\t\t\tthis.getStoreForAllElements();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tconnectedCallback() {\n\t\tconsole.log(\"connected\");\n\n\t\tthis.getStoreElements = this.querySelectorAll(`[data-get-store]`) as NodeListOf<HTMLElement>;\n\t\tthis.getStoreForAllElements();\n\t}\n\n\t/**\n\t * Loops through all data-get-store elements and runs getStore() for those elements\n\t *\n\t * @param {HTMLElement} el - The element to update with the retrieved value.\n\t * @return {void} This function does not return a value.\n\t */\n\tpublic getStoreForAllElements() {\n\t\tthis.getStoreElements.forEach((el) => {\n\t\t\tthis.getStore(el as HTMLElement);\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a value from the local storage and updates the element with the retrieved value.\n\t * Updates form field values or checks checkboxes or radios.\n\t * Normal elements have their textContent replaced with the retrieved value.\n\t *\n\t * @param {HTMLElement} el - The element to update with the retrieved value.\n\t * @return {void} This function does not return a value.\n\t */\n\tpublic getStore(el: HTMLElement) {\n\t\tconst storeKey = this.store;\n\t\tif (!storeKey) return;\n\t\tconst ls = localStorage.getItem(storeKey);\n\t\tif (!ls) return;\n\t\tconst prop = el.dataset.getStore;\n\t\t// if there is a prop and local storage is an object and get the value from the property of that object; else get the value as string from local storage\n\t\tconst value = prop && isJsonObject(ls) ? JSON.parse(ls)[prop] : ls;\n\t\tthis.log(\"getStore\", storeKey, prop, value);\n\t\tif (value === undefined) return;\n\t\t// If this is a field then replace the value with the new value\n\t\tif (isField(el)) {\n\t\t\t// temp value to check if changed\n\t\t\tlet changed = false;\n\t\t\t// If this is a checkbox or radio then set the checked value or unset if value does not match\n\t\t\tif (isCheckbox(el) || isRadio(el)) {\n\t\t\t\tconst checked = el.checked;\n\t\t\t\tel.checked = el.value === value;\n\t\t\t\tchanged = el.checked !== checked;\n\t\t\t} else if (el.value !== value.toString()) {\n\t\t\t\t// else if this is not a checkbox or radio then set the value if it does not match\n\t\t\t\tel.value = value.toString();\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\t// dispatch change event if changed\n\t\t\tif (changed) el.dispatchEvent(new Event(\"change\", { bubbles: true }));\n\t\t} else {\n\t\t\tel.textContent = value.toString();\n\t\t}\n\t}\n\n\t/**\n\t * A method to log messages if the 'debug' attribute is set.\n\t *\n\t * @param {any[]} args - The arguments to be logged.\n\t * @return {void} This function does not return a value.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate log(...args: any[]): void {\n\t\t// eslint-disable-next-line no-console\n\t\tif (this.hasAttribute(\"debug\")) console.log(...args);\n\t}\n}\n\ncustomElements.define(\"action-store\", ActionStore);\n"],"names":["isJsonObject","str","json","isHTMLInputElement","el","isField","isCheckbox","isRadio","ActionStore","__publicField","eventType","e","storeKey","storeStr","prop","ls","storeObject","value","changed","checked","args"],"mappings":"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"}